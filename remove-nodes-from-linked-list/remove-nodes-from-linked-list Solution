/**
  * Definition for singly-linked list.
  * struct ListNode {
  *     int val;
  *     ListNode *next;
  *     ListNode() : val(0), next(nullptr) {}
  *     ListNode(int x) : val(x), next(nullptr) {}
  *     ListNode(int x, ListNode *next) : val(x), next(next) {}
  * };
  */ 
 class   Solution   { 
 public : 
     ListNode *   removeNodes ( ListNode *  head )   { 
         stack < pair < int ,  ListNode * >>  st ; 
         ListNode *  curr = head ; 
          while ( curr != NULL ) { 
              if ( st . empty ( )   ||  st . top ( ) . first > curr -> val ) { 
                 st . push ( { curr -> val ,  curr } ) ; 
              } 
              else { 
                  while ( st . empty ( ) == false   &&  st . top ( ) . first < curr -> val ) { 
                     st . pop ( ) ; 
                  } 
                  if ( st . empty ( ) ) { 
                     head = curr ; 
                     st . push ( { curr -> val ,  curr } ) ; 
                  } 
                  else { 
                     st . top ( ) . second -> next = curr ; 
                     st . push ( { curr -> val ,  curr } ) ; 
                  } 
              } 
             curr = curr -> next ; 
          } 
          return  head ; 
      } 
 } ;