class   Solution   { 
 public : 
      bool   dfs ( vector < vector < int >> &  graph ,   int  node ,  vector < int >   & visited ) { 
          if ( visited [ node ] == 1 ) 
              return   true ; 
          if ( visited [ node ] == - 1 ) 
              return   false ; 
         visited [ node ] = - 1 ; 
          bool  res = true ; 
          for ( int  i : graph [ node ] ) { 
             res = res  &&   dfs ( graph ,  i ,  visited ) ; 
          } 
          if ( res ) 
             visited [ node ] = 1 ; 
          return  res ; 
      } 
     vector < int >   eventualSafeNodes ( vector < vector < int >> &  graph )   { 
          int  n = graph . size ( ) ; 
         vector < int >   visited ( n ,   - 2 ) ; 
          for ( int  i = 0 ;  i < n ;  i ++ ) { 
              if ( visited [ i ] == - 2 ) 
                  dfs ( graph ,  i ,  visited ) ; 
          } 
         vector < int >  answer ; 
          for ( int  i = 0 ;  i < n ;  i ++ ) 
              if ( visited [ i ] == 1 ) 
                 answer . push_back ( i ) ; 
          return  answer ; 
      } 
 } ;