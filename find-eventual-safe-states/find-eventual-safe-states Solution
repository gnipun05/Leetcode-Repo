# define   WHITE   ( 0 ) 
 # define   GRAY    ( 1 ) 
 # define   BLACK   ( 2 ) 
 
 class   Solution   { 
 public : 
     vector < int >   eventualSafeNodes ( vector < vector < int >>   & graph )   { 
          int  n  =  graph . size ( ) ; 
         vector < int >  answer ; 
         vector < int >   visited ( n ,  WHITE ) ; 
 
          for   ( int  i  =   0 ;  i  <  n ;   ++ i )   { 
              if   ( dfs ( graph ,  i ,  visited )   ==  BLACK )   { 
                 answer . push_back ( i ) ; 
              } 
          } 
          return  answer ; 
      } 
 private : 
      int   dfs ( vector < vector < int >>   & graph ,   int  curr ,  vector < int >   & visited )   { 
          if   ( visited [ curr ]   !=  WHITE )   { 
              return  visited [ curr ] ; 
          } 
 
         visited [ curr ]   =  GRAY ; 
          for   ( int  i  =   0 ;  i  <  graph [ curr ] . size ( ) ;   ++ i )   { 
              if   ( dfs ( graph ,  graph [ curr ] [ i ] ,  visited )   ==  GRAY )   { 
                  return  GRAY ; 
              } 
          } 
         
          return  visited [ curr ]   =  BLACK ; 
      } 
 } ;