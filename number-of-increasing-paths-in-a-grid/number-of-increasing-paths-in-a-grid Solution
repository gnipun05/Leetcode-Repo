class   Solution   { 
 public : 
     vector < int >  dir = { - 1 , 0 , 1 , 0 , - 1 } ; 
      int  mod = 1e9 + 7 ; 
      int   dfs ( vector < vector < int >> &  grid ,  vector < vector < int >> &  dp ,   int  i ,   int  j ) { 
          if ( dp [ i ] [ j ] != 0 ) 
              return  dp [ i ] [ j ] ; 
          for ( int  idx = 0 ;  idx < 4 ;  idx ++ ) { 
              int  x = i + dir [ idx ] ; 
              int  y = j + dir [ idx + 1 ] ; 
              if ( x >= 0   &&  y >= 0   &&  x < grid . size ( )   &&  y < grid [ 0 ] . size ( )   &&  grid [ i ] [ j ] < grid [ x ] [ y ] ) { 
                 dp [ i ] [ j ] = ( dp [ i ] [ j ] + dfs ( grid ,  dp ,  x ,  y ) ) % mod ; 
              } 
          } 
          return   ++ dp [ i ] [ j ] ; 
      } 
      int   countPaths ( vector < vector < int >> &  grid )   { 
          int  m = grid . size ( ) ,  n = grid [ 0 ] . size ( ) ,  answer = 0 ; 
         vector < vector < int >>   dp ( m ,   vector < int >   ( n ,   0 ) ) ; 
          for ( int  i = 0 ;  i < m ;  i ++ ) { 
              for ( int  j = 0 ;  j < n ;  j ++ ) { 
                  if ( dp [ i ] [ j ] == 0 ) 
                      dfs ( grid ,  dp ,  i ,  j ) ; 
                 answer = ( answer + dp [ i ] [ j ] ) % mod ; 
              } 
          } 
          return  answer ; 
      } 
 } ;