/*
 // Definition for a Node.
 class Node {
 public:
     int val;
     Node* left;
     Node* right;
     Node* next;
 
     Node() : val(0), left(NULL), right(NULL), next(NULL) {}
 
     Node(int _val) : val(_val), left(NULL), right(NULL), next(NULL) {}
 
     Node(int _val, Node* _left, Node* _right, Node* _next)
         : val(_val), left(_left), right(_right), next(_next) {}
 };
 */ 
 
 class   Solution   { 
 public : 
     Node *   connect ( Node *  root )   { 
          if ( root == NULL    ||  root -> left == NULL ) 
              return  root ; 
         queue < Node * >  q ; 
         Node *  upcoming = NULL ; 
         q . push ( root ) ; 
         q . push ( NULL ) ; 
          while ( q . size ( ) >= 2 ) { 
             Node *  present = q . front ( ) ;  q . pop ( ) ; 
              if ( present == NULL ) { 
                 q . push ( NULL ) ; 
                  continue ; 
              } 
             Node *  upcoming = q . front ( ) ; 
             present -> next = upcoming ; 
              if ( present -> left != NULL )      q . push ( present -> left ) ; 
              if ( present -> right != NULL )     q . push ( present -> right ) ; 
          } 
          return  root ; 
      } 
 } ;