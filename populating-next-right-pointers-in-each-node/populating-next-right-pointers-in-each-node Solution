/*
 // Definition for a Node.
 class Node {
 public:
     int val;
     Node* left;
     Node* right;
     Node* next;
 
     Node() : val(0), left(NULL), right(NULL), next(NULL) {}
 
     Node(int _val) : val(_val), left(NULL), right(NULL), next(NULL) {}
 
     Node(int _val, Node* _left, Node* _right, Node* _next)
         : val(_val), left(_left), right(_right), next(_next) {}
 };
 */ 
 
 // this is a general solution, i.e. it will work for non complete trees as well 
 // refer to previously accepted solution to see solution for this particular scenario 
 class   Solution   { 
 public : 
     Node *   connect ( Node *  root )   { 
         Node *  curr = root ,   * prev ; 
          while ( curr != NULL ) { 
             prev = curr ; 
              while ( curr  &&  curr -> left ) { 
                 curr -> left -> next = curr -> right ; 
                 
                  if ( curr -> next ) 
                     curr -> right -> next = curr -> next -> left ; 
             
                 curr = curr -> next ;     
              } 
             curr = prev -> left ; 
          } 
          return  root ; 
      } 
 } ;