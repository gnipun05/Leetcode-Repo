class   Solution   { 
 public : 
     vector < vector < int >>  dp ; 
      int   solve ( vector < int >   & nums , int  i ,   int  j ) { 
          if ( i > j ) 
              return   - 1 ; 
          if ( dp [ i ] [ j ] != - 1 ) 
              return  dp [ i ] [ j ] ; 
          int  x = 0 ,  y = 0 ,  z = 0 ; 
          if ( j - i >= 2 ) { 
             x = solve ( nums ,  i ,  j - 2 ) ; 
             y = solve ( nums ,  i + 1 ,  j - 1 ) ; 
             z = solve ( nums ,  i + 2 ,  j ) ; 
          } 
         dp [ i ] [ j ] = max ( nums [ i ]   +   min ( z ,  y ) ,  nums [ j ]   +   min ( x , y ) ) ; 
          return  dp [ i ] [ j ] ; 
      } 
      bool   PredictTheWinner ( vector < int > &  nums )   { 
          int  n = nums . size ( ) ; 
         dp . resize ( n + 1 ,   vector < int >   ( n + 1 ,   - 1 ) ) ; 
          int  Player1 = solve ( nums ,   0 ,  n - 1 ) ; 
          int  sum = accumulate ( nums . begin ( ) ,  nums . end ( ) ,   0 ) ; 
          int  Player2 = sum - Player1 ; 
          return  Player1 >= Player2 ; 
      } 
 } ;