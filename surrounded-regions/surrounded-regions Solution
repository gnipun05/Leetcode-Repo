class   Solution   { 
 public : 
      void   solve ( vector < vector < char >> &  board )   { 
          int  m = board . size ( ) ,  n = board [ 0 ] . size ( ) ; 
          for ( int  i = 0 ;  i < m ;  i ++ ) { 
              dfs ( board ,  i ,   0 ) ; 
              dfs ( board ,  i ,  n - 1 ) ; 
          } 
          for   ( int  i = 0 ;  i < n ;  i ++ ) { 
              dfs ( board ,   0 ,  i ) ; 
              dfs ( board ,  m - 1 ,  i ) ; 
          } 
          for ( int  i = 0 ;  i < m ;  i ++ ) { 
              for ( int  j = 0 ;  j < n ;  j ++ ) { 
                  if ( board [ i ] [ j ] == '#' )     board [ i ] [ j ] = 'O' ; 
                  else   if ( board [ i ] [ j ] == 'O' )    board [ i ] [ j ] = 'X' ; 
              } 
          } 
      } 
     vector < vector < int >>  directions  =   { { 1 , 0 } , { - 1 , 0 } , { 0 , 1 } , { 0 , - 1 } } ; 
      void   dfs ( vector < vector < char >>   & board ,   int  i ,   int  j ) { 
          if ( i < 0   ||  j < 0   ||  i >= board . size ( )   ||  j >= board [ 0 ] . size ( )   ||  board [ i ] [ j ] != 'O' )   return ; 
         board [ i ] [ j ] = '#' ; 
          for ( auto  direction : directions ) { 
              int  x = direction [ 0 ] + i ,  y = direction [ 1 ] + j ; 
              dfs ( board ,  x ,  y ) ; 
          } 
      } 
 } ;