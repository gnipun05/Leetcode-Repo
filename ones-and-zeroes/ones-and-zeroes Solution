class   Solution   { 
 public : 
      int   findMaxForm ( vector < string > &  strs ,   int  m ,   int  n )   { 
         vector < vector < int >>   dp ( m + 1 ,   vector < int >   ( n + 1 , 0 ) ) ; 
          for ( string s  :  strs ) { 
              int  ones = 0 ,  zeros = 0 ; 
              for ( char  c : s ) { 
                  if ( c == '0' ) 
                     zeros ++ ; 
                  else 
                     ones ++ ; 
              } 
              // dp[i][j] = the max number of strings that can be formed with i 0's and j 1's 
              // from the first few strings up to the current string s 
              // Catch: have to go from bottom right to top left 
              // Why? If a cell in the dp is updated(because s is selected), 
              // we should be adding 1 to dp[i][j] from the previous iteration (when we were not considering s) 
              // If we go from top left to bottom right, we would be using results from this iteration => overcounting 
              for ( int  i = m ;  i >= zeros ;  i -- ) 
                  for ( int  j = n ;  j >= ones ;  j -- ) 
                     dp [ i ] [ j ] = max ( dp [ i ] [ j ] ,  dp [ i - zeros ] [ j - ones ] + 1 ) ; 
          } 
          return  dp [ m ] [ n ] ; 
      } 
 } ;