class   Solution   { 
 public : 
      int   largestVariance ( string s )   { 
         vector < int >   freq ( 26 ,   0 ) ; 
          for ( int  i  =   0   ;  i  <  s . size ( )   ;  i ++ ) 
             freq [ s [ i ]   -   'a' ] ++ ; 
         
          int  maxVariance  =   0 ; 
          for ( int  a  =   0   ;  a  <   26   ;  a ++ ) { 
              for ( int  b  =   0   ;  b  <   26   ;  b ++ ) { 
                  int  remainingA  =  freq [ a ] ; 
                  int  remainingB  =  freq [ b ] ; 
                  if ( a  ==  b  ||  remainingA  ==   0   ||  remainingB  ==   0 )   continue ; 
                 
 				 // run kadanes on each possible character pairs (A & B) 
                  int  currBFreq  =   0 ,  currAFreq  =   0 ; 
                  for ( int  i  =   0   ;  i  <  s . size ( )   ;  i ++ ) { 
                      int  c  =   s [ i ]   -   'a' ; 
                     
                      if ( c  ==  a )  currAFreq ++ ; 
                      if ( c  ==  b )   { 
                         currBFreq ++ ; 
                         remainingB -- ; 
                      } 
                     
                      if ( currBFreq  >   0 )   // at least one char is seen 
                         maxVariance  =   max ( maxVariance ,  currAFreq  -  currBFreq ) ; 
                     
                      // if remainingB==0, then its useless to reset Freqs; as then only one char will be seen again and it will contribute to 0 towards answer 
                      // we dont reset the values of frequency of A and B 
                      if ( currAFreq  <  currBFreq  &&   remainingB  >=   1 ) { 
                         currBFreq  =   0 ; 
                         currAFreq  =   0 ; 
                      } 
                  } 
              } 
          } 
         
          return  maxVariance ; 
      } 
 } ;