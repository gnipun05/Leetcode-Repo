// DP solution 
 // dp[j] stores the maximum distance the car can travel after j refuels 
 // time complexity is O(N^2) 
 class   Solution   { 
 public : 
      int   minRefuelStops ( int  target ,   int  startFuel ,  vector < vector < int >> &  stations )   { 
          int  n = stations . size ( ) ; 
         vector < long   long >   dp ( n + 1 ,   0 ) ; 
         dp [ 0 ] = startFuel ; 
          for ( int  i = 0 ;  i < n ;  i ++ ) { 
              for ( int  j = i ;  j >= 0 ;  j -- ) { 
                  if ( dp [ j ] < stations [ i ] [ 0 ] ) 
                      break ; 
                 dp [ j + 1 ] = max ( dp [ j + 1 ] ,  dp [ j ] + stations [ i ] [ 1 ] ) ; 
              } 
          } 
          for ( int  i = 0 ;  i <= stations . size ( ) ;  i ++ ) 
              if ( dp [ i ] >= target ) 
                  return  i ; 
          return   - 1 ; 
      } 
 } ;