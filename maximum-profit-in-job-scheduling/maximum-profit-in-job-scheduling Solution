class   Solution   { 
 public : 
      int   jobScheduling ( vector < int > &  startTime ,  vector < int > &  endTime ,  vector < int > &  profit )   { 
          int  n  =  startTime . size ( ) ; 
         vector < vector < int >>  jobs ; 
          for   ( int  i  =   0 ;  i  <  n ;   ++ i )   { 
             jobs . push_back ( { endTime [ i ] ,  startTime [ i ] ,  profit [ i ] } ) ; 
          } 
          sort ( jobs . begin ( ) ,  jobs . end ( ) ) ; 
         map < int ,   int >  dp  =   { { 0 ,   0 } } ; 
          for   ( auto &  job  :  jobs )   { 
              auto  previous = prev ( dp . upper_bound ( job [ 1 ] ) ) ; 
              int  cur  =  previous -> second  +  job [ 2 ] ; 
              if   ( cur  >   prev ( dp . end ( ) ) -> second )   // trying to replace dp.rbegin() with prev(dp.end()) 
                 dp [ job [ 0 ] ]   =  cur ; 
          } 
          return  dp . rbegin ( ) -> second ; 
      } 
 } ;