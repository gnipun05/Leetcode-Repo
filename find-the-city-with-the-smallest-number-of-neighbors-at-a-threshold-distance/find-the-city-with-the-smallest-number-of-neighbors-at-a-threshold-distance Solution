// Dijkstra's Algorithm taking all nodes as source nodes (one at a time) 
 class   Solution   { 
 public : 
      int   findTheCity ( int  n ,  vector < vector < int >> &  edges ,   int  distanceThreshold )   { 
          int  m = edges . size ( ) ; 
         vector < pair < int ,   int >>  adj [ n ] ; 
          for ( int  i = 0 ;  i < m ;  i ++ ) { 
             adj [ edges [ i ] [ 0 ] ] . push_back ( { edges [ i ] [ 1 ] ,  edges [ i ] [ 2 ] } ) ; 
             adj [ edges [ i ] [ 1 ] ] . push_back ( { edges [ i ] [ 0 ] ,  edges [ i ] [ 2 ] } ) ; 
          } 
         vector < int >   reachable ( n ,  INT_MAX ) ; 
          for ( int  i = 0 ;  i < n ;  i ++ ) { 
             vector < int >   dist ( n ,  INT_MAX ) ; 
             priority_queue < pair < int ,   int > ,  vector < pair < int ,   int >> ,  greater < pair < int ,   int >> >  pq ; 
             dist [ i ] = 0 ; 
             pq . push ( { 0 , i } ) ; 
              int  count = 0 ; 
              while ( pq . empty ( ) == false ) { 
                  int  distance = pq . top ( ) . first ; 
                  if ( distance > distanceThreshold ) 
                      break ; 
                  int  node = pq . top ( ) . second ;  pq . pop ( ) ; 
                  for ( auto  it :  adj [ node ] ) { 
                      if ( dist [ it . first ] > distance + it . second ) { 
                         dist [ it . first ] = distance + it . second ; 
                          if ( dist [ it . first ] < distanceThreshold ) 
                             pq . push ( { dist [ it . first ] ,  it . first } ) ; 
                      } 
                  } 
              } 
              for ( int  j = 0 ;  j < n ;  j ++ ) 
                  if ( dist [ j ] <= distanceThreshold ) 
                     count ++ ; 
             reachable [ i ] = count ; 
          } 
          int  mn = INT_MAX ; 
          int  answer = 0 ; 
          for ( int  i = 0 ;  i < n ;  i ++ ) { 
              if ( mn >= reachable [ i ] ) { 
                 mn = reachable [ i ] ; 
                 answer = i ; 
              } 
          } 
          return  answer ; 
      } 
 } ;