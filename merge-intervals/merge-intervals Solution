// class Solution { 
 // public: 
 //     vector<vector<int>> merge(vector<vector<int>>& intervals) { 
 //         sort(intervals.begin(), intervals.end()); 
 //         vector<vector<int>> answer; 
 //         int n=intervals.size(); 
 //         int i=0,start=intervals[0][0], end=intervals[0][1]; 
 //         while(i<n-1){ 
 //             if(intervals[i][1]>=intervals[i+1][0] && intervals[i][1]<=intervals[i+1][1]){ 
 //                 end=intervals[i+1][1]; 
 //                 cout<<"if"<<endl; 
 //             } 
 //             else{ 
 //                 cout<<"else"<<endl; 
 //                 answer.push_back({start, end}); 
 //                 start=startintervals[i+1][0]; 
 //                 end=max(end,intervals[i+1][1]); 
 //             } 
 //             i++; 
 //         } 
 //         answer.push_back({start, end}); 
 //         return answer; 
 //     } 
 // }; 
 class   Solution   { 
 public : 
     vector < vector < int >>   merge ( vector < vector < int >> &  interval )   { 
         vector < vector < int >>  result ; 
          if ( interval . size ( ) == 0 ) 
              return  result ; 
          sort ( interval . begin ( ) , interval . end ( ) ) ; 
         result . push_back ( interval [ 0 ] ) ; 
          int  j = 0 ; 
          for ( int  i = 1 ; i < interval . size ( ) ; i ++ ) { 
              if ( result [ j ] [ 1 ] >= interval [ i ] [ 0 ] ) 
                 result [ j ] [ 1 ] = max ( result [ j ] [ 1 ] , interval [ i ] [ 1 ] ) ; 
              else { 
                 j ++ ; 
                 result . push_back ( interval [ i ] ) ; 
              } 
          } 
          return  result ; 
      } 
 } ;