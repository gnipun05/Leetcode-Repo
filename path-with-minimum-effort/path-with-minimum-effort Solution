class   Solution   { 
  public : 
      int   minimumEffortPath ( vector < vector < int >> &  heights )   { 
          int  n  =  heights . size ( ) ; 
          int  m  =  heights [ 0 ] . size ( ) ; 
         
         priority_queue < pair < int ,   int > ,  vector < pair < int ,   int >> ,  greater < pair < int ,   int >> >  pq ; 
         vector < vector < bool >>   visited ( n ,   vector < bool > ( m ,   false ) ) ; 
         
         pq . push ( { 0 ,   0 } ) ;   // first stores the effort, second stores the cordinate in the form of 100*x + y 
         
          int  dir [ 5 ]   = { - 1 ,   0 ,   1 ,   0 ,   - 1 } ; 
          int  ans  =   - 1 ; 
         
          while ( ! pq . empty ( ) ) { 
              int  effort  =  pq . top ( ) . first ; 
              int  x  =  pq . top ( ) . second / 100 ; 
              int  y  =  pq . top ( ) . second % 100 ; 
             pq . pop ( ) ; 
             
              if ( visited [ x ] [ y ] == true )  
                  continue ; 
             
             visited [ x ] [ y ]   =   true ; 
             
              if ( x == n - 1   &&  y  ==  m - 1 ) { 
                 ans  =  effort ; 
                  break ; 
              } 
             
              for ( int  i = 0 ;  i < 4 ;  i ++ ) { 
                  int  nx  =  x  +  dir [ i ] ;   // method to traverse in 4 directions 
                  int  ny  =  y  +  dir [ i + 1 ] ; 
                  int  n_pos  =  nx * 100 + ny ; 
 	
                  if   ( nx  <   0   ||  nx  >=  n  ||  ny  <   0   ||  ny  >=  m  ||  visited [ nx ] [ ny ] )  
                      continue ; 
                 
                  int  n_effort = max ( effort ,   abs ( heights [ nx ] [ ny ] - heights [ x ] [ y ] ) ) ; 
                 pq . push ( { n_effort ,  n_pos } ) ; 
              } 
          } 
         
          return  ans ; 
      } 
  } ;