class   Solution   { 
  public : 
      int   orangesRotting ( vector < vector < int >> &  grid )   { 
          int  m = grid . size ( ) ,  n = grid [ 0 ] . size ( ) ,  answer = 0 ,  count = 0 ; 
         queue < int >  q ; 
          for ( int  i = 0 ;  i < m ;  i ++ ) 
              for ( int  j = 0 ;  j < n ;  j ++ ) 
                  if   ( grid [ i ] [ j ] == 2 ) 
                     q . push ( i * 10 + j ) ; 
                  else   if ( grid [ i ] [ j ] == 1 ) 
                     count ++ ; 
          if ( count == 0 ) 
              return   0 ; 
          int  directions [ ] = { - 1 , 0 , 1 , 0 , - 1 } ; 
          while ( q . empty ( ) == false ) { 
              int  s = q . size ( ) ; 
              while ( s -- ) { 
                  int  x = q . front ( ) / 10 ; 
                  int  y = q . front ( ) % 10 ; 
                 q . pop ( ) ; 
                  for ( int  i = 0 ;  i < 4 ;  i ++ ) { 
                      int  nx = x + directions [ i ] ; 
                      int  ny = y + directions [ i + 1 ] ; 
                      if ( nx < 0   ||  ny < 0   ||  nx >= m  ||  ny >= n  ||  grid [ nx ] [ ny ] != 1 ) 
                          continue ; 
                     q . push ( nx * 10 + ny ) ; 
                     grid [ nx ] [ ny ] = 2 ; 
                     count -- ;                     
                  } 
              } 
             answer ++ ; 
          } 
         answer -- ;   // because at last when no 1s and all 2s and 0s are present, an extra addition in answer is taking place 
          return   ( count == 0 ) ? answer : - 1 ; 
      } 
  } ;