/**
  * Definition for singly-linked list.
  * struct ListNode {
  *     int val;
  *     ListNode *next;
  *     ListNode() : val(0), next(nullptr) {}
  *     ListNode(int x) : val(x), next(nullptr) {}
  *     ListNode(int x, ListNode *next) : val(x), next(next) {}
  * };
  */ 
   // Resubmitting coz of it being the daily leetcode challenge 
 class   Solution   { 
 public : 
     ListNode *   mergeTwoLists ( ListNode *   & l1 ,  ListNode *   & l2 ) { 
         ListNode *  temp = new   ListNode ( ) ; 
         ListNode *  head = temp ; 
          while ( l1 != NULL   &&  l2 != NULL ) { 
              if ( l1 -> val < l2 -> val ) { 
                 temp -> next = l1 ; 
                 l1 = l1 -> next ; 
              } 
              else { 
                 temp -> next = l2 ; 
                 l2 = l2 -> next ; 
              } 
             temp = temp -> next ; 
          } 
          if ( l1 == NULL ) 
             temp -> next = l2 ; 
          else 
             temp -> next = l1 ; 
          return  head -> next ; 
      } 
     ListNode *   mergeKLists ( vector < ListNode * > &  lists )   { 
          int  n = lists . size ( ) ; 
          if ( n == 0 ) 
              return   NULL ; 
          while ( lists . size ( ) > 1 ) { 
             ListNode *  temp = mergeTwoLists ( lists [ 0 ] ,  lists [ 1 ] ) ; 
             lists . push_back ( temp ) ; 
             lists . erase ( lists . begin ( ) ) ; 
             lists . erase ( lists . begin ( ) ) ; 
          } 
          return  lists [ 0 ] ; 
      } 
 } ;