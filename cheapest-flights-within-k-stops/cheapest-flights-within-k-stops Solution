// Resubmitting coz of it being the daily leetcode challenge 
  class   Solution   { 
  public : 
      int  answer ; 
      int  dp [ 101 ] [ 101 ] ; 
      int   dfs ( vector < pair < int ,   int >>  adj [ ] ,   int  k ,   int  node ,   int  dst ) { 
          if ( dp [ node ] [ k ] != - 1 ) 
              return  dp [ node ] [ k ] ; 
          if ( node == dst ) { 
              return   0 ; 
          } 
          if ( k == 0 ) 
              return  INT_MAX ; 
          int  temp = INT_MAX ; 
          for ( auto  i :  adj [ node ] ) { 
              int  get = dfs ( adj ,  k - 1 ,  i . first ,  dst ) ; 
              if ( get != INT_MAX ) 
                 temp = min ( temp ,  get + i . second ) ; 
          } 
          return  dp [ node ] [ k ] = temp ; 
      } 
      int   findCheapestPrice ( int  n ,  vector < vector < int >> &  flights ,   int  src ,   int  dst ,   int  k )   { 
         vector < pair < int ,   int >>  adj [ n ] ; 
          for ( int  i = 0 ;  i < flights . size ( ) ;  i ++ ) { 
             adj [ flights [ i ] [ 0 ] ] . push_back ( { flights [ i ] [ 1 ] ,  flights [ i ] [ 2 ] } ) ; 
          } 
         answer = 0 ; 
          memset ( dp ,   - 1 ,   sizeof ( dp ) ) ; 
          int  answer = dfs ( adj ,  k + 1 ,  src ,  dst ) ; 
          if ( answer == INT_MAX ) 
              return   - 1 ; 
          return  answer ; 
      } 
  } ;