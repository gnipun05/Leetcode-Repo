// resubmitting coz of it being the daily leetcode challenge 
 class   Solution   { 
 public : 
      int   LCS ( string word1 ,  string word2 ) { 
          int  m = word1 . size ( ) ,  n = word2 . size ( ) ; 
          int  dp [ m + 1 ] [ n + 1 ] ; 
          for ( int  i = 0 ;  i <= m ;  i ++ ) 
             dp [ i ] [ 0 ] = 0 ; 
          for ( int  j = 0 ;  j <= n ;  j ++ ) 
             dp [ 0 ] [ j ] = 0 ; 
          for ( int  i = 1 ;  i <= m ;  i ++ ) { 
              for ( int  j = 1 ;  j <= n ;  j ++ ) { 
                  if ( word1 [ i - 1 ] == word2 [ j - 1 ] ) 
                     dp [ i ] [ j ] = dp [ i - 1 ] [ j - 1 ] + 1 ; 
                  else 
                     dp [ i ] [ j ] = max ( dp [ i - 1 ] [ j ] ,  dp [ i ] [ j - 1 ] ) ; 
              } 
          } 
          return  dp [ m ] [ n ] ; 
      } 
     
      int   longestPalindromeSubseq ( string s )   { 
         string s2 = s ; 
          reverse ( s2 . begin ( ) ,  s2 . end ( ) ) ; 
          return   LCS ( s ,  s2 ) ; 
      } 
 } ;