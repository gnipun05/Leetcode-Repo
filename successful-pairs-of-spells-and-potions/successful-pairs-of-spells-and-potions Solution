class   Solution   { 
 public : 
     
      int   lowerbound ( vector < int >   & arr ,   int  N ,   double  X ) { 
          int  mid ; 
          int  low  =   0 ; 
          int  high  =  N ; 
 
          while   ( low  <  high )   { 
             mid  =  low  +   ( high  -  low )   /   2 ; 
              if   ( X  <=  arr [ mid ] ) 
                 high  =  mid ; 
              else  
                 low  =  mid  +   1 ; 
          } 
 
          // if X is greater than arr[n-1] 
          if ( low  <  N  &&  arr [ low ]   <  X )     // like we return the end() pointer in case of stl 
             low ++ ; 
 
          return  low ; 
      } 
     
     vector < int >   successfulPairs ( vector < int > &  spells ,  vector < int > &  potions ,   long   long  success )   { 
         vector < int >  answer ; 
          sort ( potions . begin ( ) ,  potions . end ( ) ) ; 
          for ( int  i = 0 ;  i < spells . size ( ) ; i ++ ) { 
              double  temp = ( double ) success / spells [ i ] ; 
              int  ptr = lowerbound ( potions ,  potions . size ( ) ,  temp ) ; 
             temp = potions . size ( ) - ptr ; 
             answer . push_back ( temp ) ; 
          } 
          return  answer ; 
      } 
 } ;