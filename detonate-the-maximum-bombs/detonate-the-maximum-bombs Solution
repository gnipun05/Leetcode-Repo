class   Solution   { 
 public : 
      void   dfs ( vector < int >  adj [ ] ,  vector < bool >   & vis ,   int   & count ,   int  node ) { 
         vis [ node ] = true ; 
         count ++ ; 
          for ( int  i : adj [ node ] ) { 
              if ( vis [ i ] == false ) 
                  dfs ( adj ,  vis ,  count ,  i ) ; 
          } 
      } 
      int   maximumDetonation ( vector < vector < int >> &  bombs )   { 
          int  n = bombs . size ( ) ; 
         vector < int >  adj [ n ] ; 
          for ( int  i = 0 ;  i < n ;  i ++ ) { 
              for ( int  j = i + 1 ;  j < n ;  j ++ ) { 
                  long   long  x1 = bombs [ i ] [ 0 ] ,  y1 = bombs [ i ] [ 1 ] ,  r1 = bombs [ i ] [ 2 ] ; 
                  long   long  x2 = bombs [ j ] [ 0 ] ,  y2 = bombs [ j ] [ 1 ] ,  r2 = bombs [ j ] [ 2 ] ; 
                  long   long  dist = ( x1 - x2 ) * ( x1 - x2 )   +   ( y1 - y2 ) * ( y1 - y2 ) ; 
                  if ( dist <= r1 * r1 ) 
                     adj [ i ] . push_back ( j ) ; 
                  if ( dist <= r2 * r2 ) 
                     adj [ j ] . push_back ( i ) ; 
              } 
          } 
          int  answer = 0 ; 
          for ( int  i = 0 ;  i < n ;  i ++ ) { 
             vector < bool >   vis ( n ,   false ) ; 
              int  count = 0 ; 
              dfs ( adj ,  vis ,  count ,  i ) ; 
             answer = max ( answer ,  count ) ; 
          } 
          return  answer ; 
      } 
 } ;