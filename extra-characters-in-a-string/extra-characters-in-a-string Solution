// 2D DP array 
 class   Solution   { 
 public : 
      int   solve ( string s ,  vector < string > &  d ,   int  i ,   int  j ,  vector < vector < int >> &  dp ) { 
          if ( s . size ( ) == 0 ) 
              return   0 ; 
          if ( dp [ i ] [ j ] != 100 ) 
              return  dp [ i ] [ j ] ; 
         dp [ i ] [ j ] = j - i + 1 ; 
          for ( string str : d ) { 
             size_t f = s . find ( str ) ; 
              if ( f != string :: npos ) { 
                 dp [ i ] [ j ] = min ( dp [ i ] [ j ] ,   solve ( s . substr ( 0 ,  f ) ,  d ,  i ,  i + f - 1 ,  dp )   +   solve ( s . substr ( f + str . size ( ) ) ,  d ,  i + f + str . size ( ) ,  j ,  dp ) ) ; 
              } 
          } 
          return  dp [ i ] [ j ] ; 
      } 
      int   minExtraChar ( string s ,  vector < string > &  d )   { 
         vector < vector < int >>   dp ( 100 ,   vector < int >   ( 100 ,   100 ) ) ; 
          int  n = s . size ( ) ; 
          solve ( s ,  d ,   0 ,  n - 1 ,  dp ) ; 
          return  dp [ 0 ] [ n - 1 ] ; 
      } 
 } ;