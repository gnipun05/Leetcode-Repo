class   Solution   { 
 public : 
      long   long   solve ( int  i , vector < pair < int , int >> & v , int  choosen , long   long  extra , vector < vector < int >> & dp )   { 
          if ( v . size ( ) - choosen <= extra ) 
              return   0 ; 
          if ( i >= v . size ( ) )  
              return  INT_MAX ; 
          int  left = v . size ( ) - choosen - extra ; 
          if ( dp [ i ] [ left ] != - 1 ) 
                  return  dp [ i ] [ left ] ; 
          long   long  pick = INT_MAX , notpick = INT_MAX ; 
         pick = solve ( i + 1 , v , choosen + 1 , extra + v [ i ] . second , dp ) + v [ i ] . first ; 
         notpick = solve ( i + 1 , v , choosen , extra , dp ) ; 
          return  dp [ i ] [ left ] = min ( pick , notpick ) ; 
      } 
      int   paintWalls ( vector < int > &  cost ,  vector < int > &  time )   { 
         vector < pair < int , int >> v ; 
          for ( int  i = 0 ; i < cost . size ( ) ; i ++ ) 
             v . push_back ( { cost [ i ] , time [ i ] } ) ; 
          sort ( v . begin ( ) , v . end ( ) ) ; 
          int  n = cost . size ( ) ; 
         vector < vector < int >> dp ( n , vector < int > ( n + 1 , - 1 ) ) ; 
          return   solve ( 0 , v , 0 , 0 , dp ) ; 
      } 
 } ;