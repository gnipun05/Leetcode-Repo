/*
 // Definition for a Node.
 class Node {
 public:
     int val;
     vector<Node*> neighbors;
     Node() {
         val = 0;
         neighbors = vector<Node*>();
     }
     Node(int _val) {
         val = _val;
         neighbors = vector<Node*>();
     }
     Node(int _val, vector<Node*> _neighbors) {
         val = _val;
         neighbors = _neighbors;
     }
 };
 */ 
 
 class   Solution   { 
 public : 
     Node *   cloneGraph ( Node *  node )   { 
          if ( node == NULL ) 
              return   NULL ; 
         unordered_map < int ,  Node * >  m ; 
          return   dfs ( node ,  m ) ; 
      } 
     Node *   dfs ( Node *  node ,  unordered_map < int ,  Node * >   & m ) { 
          int  val = node -> val ; 
          if ( m . count ( val ) ) 
              return  m [ val ] ; 
         Node  * myNode  =   new   Node ( node -> val ) ; 
         m [ val ] = myNode ; 
          for ( Node *  n : node -> neighbors ) { 
             myNode -> neighbors . push_back ( dfs ( n ,  m ) ) ; 
          } 
          return  myNode ; 
      } 
 } ;