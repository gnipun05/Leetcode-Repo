class   Solution   { 
 public : 
      // largestRecatangleArea is copied as it is from -> Q84. Largest Rectangle in Histogram 
      int   largestRectangleArea ( vector < int > &  heights )   { 
          int  res = 0 ; 
          int  n = heights . size ( ) ; 
         stack < int > s ; 
          for ( int  i = 0 ;  i < n ;  i ++ ) { 
              while ( s . empty ( ) == false   &&  heights [ i ] < heights [ s . top ( ) ] ) { 
                  int  temp = s . top ( ) ; s . pop ( ) ; 
                  int  curr = heights [ temp ] * ( ( s . empty ( ) ) ? i : ( i - s . top ( ) - 1 ) ) ; 
                 res = max ( res ,  curr ) ; 
              } 
             s . push ( i ) ; 
          } 
          while ( s . empty ( ) == false ) { 
              int  temp = s . top ( ) ; s . pop ( ) ; 
              int  curr = heights [ temp ] * ( ( s . empty ( ) ) ? n : ( n - s . top ( ) - 1 ) ) ; 
             res = max ( res ,  curr ) ; 
          } 
          return  res ; 
      } 
      // only the below given function is being  
      int   maximalRectangle ( vector < vector < char >> &  matrix )   { 
          int  m = matrix . size ( ) ; 
          int  n = matrix [ 0 ] . size ( ) ; 
         vector < int >   currRow ( n ,   0 ) ; 
          int  answer = largestRectangleArea ( currRow ) ; 
          for ( int  i = 0 ;  i < m ;  i ++ ) { 
              for ( int  j = 0 ;  j < n ;  j ++ ) { 
                  if ( matrix [ i ] [ j ] == '1' ) 
                     currRow [ j ] += 1 ; 
                  else 
                     currRow [ j ] = 0 ; 
              } 
             answer = max ( answer ,   largestRectangleArea ( currRow ) ) ; 
          } 
          return  answer ; 
      } 
 } ;