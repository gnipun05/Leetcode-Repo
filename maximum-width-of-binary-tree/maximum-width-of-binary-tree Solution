/**
  * Definition for a binary tree node.
  * struct TreeNode {
  *     int val;
  *     TreeNode *left;
  *     TreeNode *right;
  *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
  *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
  *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
  * };
  */ 
   // resubmitting coz of it being the daily leetcode challenge 
 class   Solution   { 
 public : 
      int   widthOfBinaryTree ( TreeNode *  root )   { 
         queue < pair < TreeNode * , unsigned   long   long >>  q ; 
         q . push ( { root ,   1 } ) ; 
          int  answer = 1 ; 
          while ( ! q . empty ( ) ) { 
              int  n = q . size ( ) ; 
              unsigned   long   long  l , r ; 
             l = q . front ( ) . second ; 
              while ( n -- ) { 
                 TreeNode *  u = q . front ( ) . first ; 
                 r = q . front ( ) . second ; q . pop ( ) ;    
                  if ( u -> left ) 
                     q . push ( { u -> left ,   2 * r } ) ; 
                  if ( u -> right ) 
                     q . push ( { u -> right ,   2 * r + 1 } ) ; 
              } 
             answer = max ( answer ,   ( int ) ( r + 1 - l ) ) ; 
          } 
          return  answer ; 
      } 
 } ;