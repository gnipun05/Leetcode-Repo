/* we check for char present at pos i and j, and then check if the string in range i+1 to j-1 is palindrome or not
 if both conditions satisfy, we mark dp[i][j] as true
 state of dp[i][j] tells that is string from range i to j a palindrome (true) or not (false) */ 
 
 class   Solution   { 
 public : 
     string  longestPalindrome ( string s )   { 
          int  n = s . size ( ) ,  maxlen ,  startingIndexOfLPS ; 
          bool  dp [ 1001 ] [ 1001 ] = { false } ; 
          for ( int  i = n - 1 ;  i >= 0 ;  i -- ) { 
              for ( int  j = i ;  j < n ;  j ++ ) { 
                  if ( s [ i ] == s [ j ] ) 
                     dp [ i ] [ j ] = ( j - i < 3 )   ||  dp [ i + 1 ] [ j - 1 ] ;   // if number of char from ith pos to jth pos are less than eq 3, we don't need to check for any previous value of dp 
                  if   ( dp [ i ] [ j ] && ( j - i + 1 > maxlen ) ) { 
                     startingIndexOfLPS = i ; 
                     maxlen = j - i + 1 ; 
                  } 
              } 
          } 
          return  s . substr ( startingIndexOfLPS ,  maxlen ) ; 
      } 
 } ;