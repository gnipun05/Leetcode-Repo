class   Solution   { 
 public : 
      int   findTargetSumWays ( vector < int > &  nums ,   int  target )   { 
          int  sum = 0 ; 
          for ( int  i : nums ) 
             sum += i ; 
          if ( sum < abs ( target )   ||   ( sum + target ) % 2 == 1 )   //  very important conditions 
              return   0 ; 
          return   countSubsetSum ( nums ,   ( sum + target ) / 2 ) ; 
      } 
      int   countSubsetSum ( vector < int > &  nums ,   int  sum ) { 
          int  n = nums . size ( ) ; 
          int  dp [ n + 1 ] [ sum + 1 ] ; 
          for ( int  i = 0 ;  i <= sum ;  i ++ ) 
             dp [ 0 ] [ i ] = 0 ; 
          // for(int i=0; i<=n; i++) 
          //     dp[i][0]=1; // fails for test cases like nums=[0,0,0,0,0,0,0,0,1] and target=1 
         dp [ 0 ] [ 0 ] = 1 ; 
          for ( int  i = 1 ;  i <= n ;  i ++ ) { 
              for ( int  j = 0 ;  j <= sum ;  j ++ ) { 
                  if ( nums [ i - 1 ] <= j ) 
                     dp [ i ] [ j ] = dp [ i - 1 ] [ j ] + dp [ i - 1 ] [ j - nums [ i - 1 ] ] ; 
                  else 
                     dp [ i ] [ j ] = dp [ i - 1 ] [ j ] ; 
              } 
          } 
          return  dp [ n ] [ sum ] ; 
      } 
 } ;